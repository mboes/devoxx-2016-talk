#+TITLE: Haskell meets +Java+ Scala
#+AUTHOR: Mathieu Boespflug Founder at Tweag I/O
#+EMAIL: m@tweag.io

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:nil
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:0
#+OPTIONS: timestamp:nil
#+OPTIONS: reveal_title_slide:"<h1>Haskell&nbsp;meets<br/><strike>Java</strike>&nbsp;Scala</h1><h2>Mathieu&nbsp;Boespflug<br>Founder&nbsp;at&nbsp;tweag.io</h2>"
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_HLEVEL: 2
#+REVEAL_MARGIN: 0.1
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_THEME: white
#+REVEAL_TRANS: cube

* Inline the World
#+ATTR_REVEAL: :frag roll-in
inline-r

#+ATTR_REVEAL: :frag roll-in
\nbsp \nbsp \nbsp inline-c (+ language-c-inline)

#+ATTR_REVEAL: :frag roll-in
\nbsp \nbsp \nbsp \nbsp \nbsp \nbsp *inline-java*

#+ATTR_REVEAL: :frag roll-in
\nbsp \nbsp \nbsp \nbsp \nbsp \nbsp \nbsp \nbsp \nbsp inline-python?

#+ATTR_REVEAL: :frag roll-in
\nbsp \nbsp \nbsp \nbsp \nbsp \nbsp \nbsp \nbsp \nbsp \nbsp \nbsp \nbsp ...
* Don't reinvent the World
** Distributed analytics
- *Problem:* terabytes of data available, want to map or fold the same
  function on each word.
#+ATTR_REVEAL: :frag roll-in
- *Down the rabbit hole we go...*
  #+ATTR_REVEAL: :frag roll-in
  + need some way to ship function to where the data lives,
  #+ATTR_REVEAL: :frag roll-in
  + need efficient wire protocol and high-performance
    (de)serialization routines to communicate results,
  #+ATTR_REVEAL: :frag roll-in
  + need to handle failures and automatically rebalance load,
  #+ATTR_REVEAL: :frag roll-in
  + need to handle demand spikes and transparently provision more
    resources if avaiable,
  + ...
  #+ATTR_REVEAL: :frag roll-in
- *Or we can just use Apache Spark.* (or Hadoop, or SciDB, or ...)
* Calling conventions
#+attr_html: :width 800px
\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp[[./callstack.svg]]
* Approaches to interop
** Transpile Haskell
- This is the *GHCJS way*.
- Huge engineering effort.
  + Have to implement a *full transpiler* for all of Haskell to
    JavaScript.
    + Fortunately can just focus on Core.
  + But what about all those primitives?
  + *450+ primops* in GHC HEAD currently.
  + Effectively have to *reimplement RTS*.
#+ATTR_REVEAL: :frag roll-in
- *Big win:* single target runtime environment.
  + Might be more ubiquitous, have better runtime code specialization,
    more complete FFI...
#+ATTR_REVEAL: :frag roll-in
- The game to watch: *rahulmutt/ghcvm - Haskell compiled to JVM bytecode*.
** Transpilation
#+attr_html: :width 1000px
\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp[[./transpile.svg]]
** Binary protocol
#+ATTR_REVEAL: :frag roll-in
- Make everything have the *same calling convention*:
  1. serialize the function name,
  2. serialize each argument one by one,
  3. Pack into a message,
  4. "send" the message to some remote message interpretation endpoint.
#+ATTR_REVEAL: :frag roll-in
- *Same wire format for identifying functions, arguments*. But each
  language has to reinterpret canonical format into own native format.
#+ATTR_REVEAL: :frag roll-in
- Optimize the common case: intra-language calls can still use fast
  path (no serialization).
#+ATTR_REVEAL: :frag roll-in
- Slow inter-language calls. But that's okay: for many use cases
  inter-language calls are rare.
#+ATTR_REVEAL: :frag roll-in
- The canonical implementation of this idea:
  *nh2/call-from-haskell-from-anything*.
** Code blocks interacting via protocol
#+attr_html: :width 1100px
\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp[[./binaryprot.svg]]
** From FFI bindings to inline foreign code
#+ATTR_REVEAL: :frag roll-in
- Start from a simple premise: writing bindings by hand is painful.
  + too *low-level*, so need to also write wrappers
  + *heavyweight*: need a binding before calling a function.
  + monolithic binding libraries are *anti-modular*.
#+ATTR_REVEAL: :frag roll-in
- Historical approach: preprocessor tool generates bindings from
  annotated Haskell.
  + Problem: preprocessors are a pain to work with.
#+ATTR_REVEAL: :frag roll-in
- Preprocessors only necessary because primitive compiler support
  intentionally bare.
#+ATTR_REVEAL: :frag roll-in
- Our solution: enable inline foreign calls. Push all the intelligence
  in custom quasiquoters.
* inline-java Hello World live coding
* Sparkle demo (with code)
* Architectural patterns
** JAR as a universal package format
#+attr_html: :width 600px
\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp\nbsp[[./jar.svg]]
** Avoid marshalling costs
- Vision: want foreign function calls to be as cheap as native calls
  in the common case.

#+BEGIN_SRC haskell
map :: (a -> b) -> [a] -> b
map f [] = []
map f (x:xs) = f x : map f xs
#+END_SRC

- If ~f~ foreign and cheap, but expensive to call, then better
  implement mapping in foreign code, not Haskell.
** Have an explicit cost model
- Don't make the same mistake as RPC systems (CORBA, SOAP, etc)!
- In our case foreign calls /can/ be as efficient as native ones. But
  sometimes need to switch between representations.
  + Representation conversion = allocation + copy.
- Costs should always be explicit.
#+ATTR_REVEAL: :frag fade-in
#+BEGIN_SRC haskell
main :: IO ()
main = do
  message <- reflect "Hello World!"
  [java| javax.swing.JOptionPanel.showMessageDialog(null, $message) |]
#+END_SRC
* Closing words
- To interop, just pretend Scala = Java + implicits.
- *High-performance* interop is not only possible but key to
  modularity and making foreign functions first-class citizens of the
  language.
- Always make *costs explicit to the programmer* (true for networks,
  true for interop).
- Designed specifically to avoid compiler hacking, but in the end did
  have to contribute a few patches to support this project.
- Code available on [[https://github.com/tweag/sparkle][Github: tweag/sparkle]].
- email: [[mailto:m@tweag.io][m@tweag.io]] / twitter: [[https://twitter.com/mboesp][mboesp]]
